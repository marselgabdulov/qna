- cache @question do
  div[id='question' class='question' data-question-id="#{@question.id}" style="width: 50em;"]
    .card
      .card-body
        p.text-secondary
          =time_ago(@question.created_at)
          | &nbsp;
          | by
          | &nbsp;
          =@question.user.email
        h2= @question.title

        p=@question.body
        .inline-container
          - if current_user == @question.user
            - if can?(:update, @question)
              = link_to 'Edit Question', '#', class: 'edit-question-link link-secondary'
            - if can?(:destroy, @question)
              = link_to 'Delete Question', @question, method: :delete, confirm: 'Are you sure?', class: 'edit-question-link link-danger'

        - if can?(:create, Subscription)
          = link_to 'Subscribe', question_subscriptions_path(@question),
                                method: :post,
                                remote: true,
                                class: "question-subscribe-link #{'hidden' if current_user&.subscribed_to?(@question)}"
        - if can?(:destroy, Subscription)
          = link_to 'Unsubscribe', subscription_path(@question),
                                      method: :delete,
                                      remote: true,
                                      class: "question-unsubscribe-link #{'hidden' unless current_user&.subscribed_to?(@question)}"

        .question-files
          - if @question.files.attached?
                | Files:
                = render partial: 'attachments/attachment', collection: @question.files

        - if @question.links.any?
          .links
            span Links:
            div.question-links
              - @question.links.each do |link|
                = render 'links/link', link: link

        #reward
          - if @question.reward.present?
            p Rewards:
            .question-rewards
              = render @question.reward

        p.inline-container
          div.inline-container
            | Question raiting:
            | &nbsp;
            .raiting
              = @question.raiting
            div[class="voting-buttons #{hide_button_for(@question)} inline-container"]
              - if can?(:vote_up, @question)
                = link_to 'Vote Up', vote_up_question_path(@question), method: :post, remote: true, class: 'btn btn-outline-success my-2 my-sm-0'
              - if can?(:vote_down, @question)
                = link_to 'Vote Down', vote_down_question_path(@question), method: :post, remote: true, class: 'btn btn-outline-success my-2 my-sm-0'
            - if can?(:revote, @question)
              = link_to 'Revote', revote_question_path(@question), method: :post, remote: true, class: "revote #{show_button_for(@question)} btn btn-outline-success my-2 my-sm-0"

      #question-form.hidden
        .question-errors
        = render 'shared/errors', resource: @question
        = render 'edit_form'

      div[id="question-#{@question.id}-comments"]
        .card
          .card-body
            h4="Comments: #{@question.comments.count}"
            .comments-list
            - if @question.comments.present?
              = render @question.comments.order(:created_at)
            - if user_signed_in?
              = render 'comments/form', commentable: @question, local: Comment.new
              .question-add-comment-link
                p= link_to 'add comment', '#', class: 'add-comment-link text-secondary', data: { commentable_type: @question.class.name.downcase, commentable_id: @question.id }, remote: true

      .answers
        .card
          .card-body
            h4="Answers: #{@question.answers.count}"
            .answer-errors
              = render 'shared/errors', resource: @answer
            - if @question.answers.any?
              = render @question.answers.sort_by_best
